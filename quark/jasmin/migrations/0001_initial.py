# Generated by Django 5.0.11 on 2025-05-03 16:57

import django.utils.timezone
import quark.jasmin.utils.utils
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='JasminFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is active, use this instead of deleting')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was originally created')),
                ('modified_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was last modified')),
                ('fid', models.CharField(help_text='The Jasmin unique filter id', max_length=64, unique=True)),
                ('nature', models.CharField(choices=[('MO', 'Mobile Originated'), ('MT', 'Mobile Terminated'), ('ALL', 'All')], default='ALL', help_text='Whether a filter applies to MO, MT or ALL messages', max_length=3)),
                ('param', quark.jasmin.utils.utils.StructuredJSONField(blank=True, help_text="For a given filter type, additional parameters may be required. Must be in format {'key': '', 'value': ''}", max_length=100, null=True)),
                ('filter_type', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'jasmin_filter',
            },
        ),
        migrations.CreateModel(
            name='JasminGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is active, use this instead of deleting')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was originally created')),
                ('modified_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was last modified')),
                ('gid', models.CharField(db_index=True, help_text="This matches the group id created in Jasmin and will be prefixed with Workspace's prefix", max_length=16, unique=True, verbose_name='Group Id')),
                ('description', models.TextField(blank=True, help_text='Short description about purpose of this group.', null=True, verbose_name='Description')),
            ],
            options={
                'db_table': 'jasmin_group',
            },
        ),
        migrations.CreateModel(
            name='JasminRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is active, use this instead of deleting')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was originally created')),
                ('modified_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was last modified')),
                ('rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('nature', models.CharField(choices=[('MO', 'MO'), ('MT', 'MT')], max_length=2)),
                ('order', models.IntegerField(unique=True)),
                ('router_type', models.CharField(choices=[('DefaultRoute', 'Default route'), ('StaticMTRoute', 'Static MTRoute'), ('RandomRoundrobinMTRoute', 'Random Roundrobin MTRoute'), ('FailoverMTRoute', 'Failover MTRoute')], default='DefaultRoute', max_length=25)),
            ],
            options={
                'db_table': 'jasmin_route',
            },
        ),
        migrations.CreateModel(
            name='JasminSMPPConnector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is active, use this instead of deleting')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was originally created')),
                ('modified_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was last modified')),
                ('host', models.CharField(help_text='Hostname or IP address of the SMSC', max_length=50)),
                ('port', models.IntegerField(default=2775, help_text='The port number for the connection to the SMSC.')),
                ('username', models.CharField(default='smppclient', help_text='Username to connect to SMSC server', max_length=15)),
                ('password', models.CharField(help_text='Password to connect to SMSC server', max_length=16)),
                ('system_type', models.CharField(blank=True, help_text='The system_type parameter categorizes the type of ESME', max_length=100, null=True)),
                ('log_file', models.TextField(blank=True, help_text='Log file path for this connector', null=True)),
                ('log_rotate', models.CharField(choices=[('S', 'Seconds'), ('M', 'Minutes'), ('H', 'Hours'), ('D', 'Days'), ('W0-W6', 'Weekend'), ('midnight', 'Midnight')], default='midnight', help_text='When to rotate the log file', max_length=30)),
                ('log_level', models.IntegerField(default=20, help_text='Logging level: 10=DEBUG, 20=INFO, 30=WARNING, 40=ERROR, 50=CRITICAL')),
                ('log_privacy', models.BooleanField(default=False, help_text="Don't log message content if enabled")),
                ('use_ssl', models.BooleanField(default=False, help_text='Activate SSL connection')),
                ('ssl_certificate_file', models.CharField(blank=True, help_text='Path to SSL certificate file', max_length=255, null=True)),
                ('bind_operation', models.CharField(choices=[('transceiver', 'transceiver'), ('receiver', 'receiver'), ('transmitter', 'transmitter')], default='transceiver', help_text='Bind type: transceiver, receiver or transmitter', max_length=100)),
                ('session_init_timer_secs', models.IntegerField(default=30, help_text='Timeout for response to bind request (seconds)')),
                ('enquire_link_timer_secs', models.IntegerField(default=30, help_text='Enquire link interval (seconds)')),
                ('inactivity_timer_secs', models.IntegerField(default=300, help_text='Maximum time between transactions before reconnecting (seconds)')),
                ('response_timer_secs', models.IntegerField(default=120, help_text='Timeout for responses to any request PDU (seconds)')),
                ('pdu_read_timer_secs', models.IntegerField(default=10, help_text='Timeout for reading a single PDU (seconds)')),
                ('reconnect_on_connection_loss', models.BooleanField(default=True, help_text='Reconnect on connection loss')),
                ('reconnect_on_connection_failure', models.BooleanField(default=True, help_text='Reconnect on connection failure')),
                ('reconnect_on_connection_loss_delay', models.IntegerField(default=10, help_text='Reconnect delay on connection loss (seconds)')),
                ('reconnect_on_connection_failure_delay', models.IntegerField(default=10, help_text='Reconnect delay on connection failure (seconds)')),
                ('source_addr', models.CharField(blank=True, help_text='Default source address for SMS-MT', max_length=100, null=True)),
                ('source_addr_ton', models.IntegerField(choices=[(0, 'Unknown'), (1, 'International'), (2, 'National'), (3, 'Network Specific'), (4, 'Subscriber Number'), (5, 'Alphanumeric'), (6, 'Abbreviated')], default=2, help_text='Source address TON')),
                ('source_addr_npi', models.IntegerField(choices=[(0, 'Unknown'), (1, 'ISDN'), (2, 'Data'), (3, 'Telex'), (4, 'Land Mobile'), (5, 'National'), (6, 'Private'), (10, 'Ermes'), (14, 'Internet'), (18, 'WAP Client ID')], default=1, help_text='Source address NPI')),
                ('dest_addr_ton', models.IntegerField(choices=[(0, 'Unknown'), (1, 'International'), (2, 'National'), (3, 'Network Specific'), (4, 'Subscriber Number'), (5, 'Alphanumeric'), (6, 'Abbreviated')], default=1, help_text='Destination address TON')),
                ('dest_addr_npi', models.IntegerField(choices=[(0, 'Unknown'), (1, 'ISDN'), (2, 'Data'), (3, 'Telex'), (4, 'Land Mobile'), (5, 'National'), (6, 'Private'), (10, 'Ermes'), (14, 'Internet'), (18, 'WAP Client ID')], default=1, help_text='Destination address NPI')),
                ('address_ton', models.IntegerField(choices=[(0, 'Unknown'), (1, 'International'), (2, 'National'), (3, 'Network Specific'), (4, 'Subscriber Number'), (5, 'Alphanumeric'), (6, 'Abbreviated')], default=0, help_text='Bind address TON')),
                ('address_npi', models.IntegerField(choices=[(0, 'Unknown'), (1, 'ISDN'), (2, 'Data'), (3, 'Telex'), (4, 'Land Mobile'), (5, 'National'), (6, 'Private'), (10, 'Ermes'), (14, 'Internet'), (18, 'WAP Client ID')], default=1, help_text='Bind address NPI')),
                ('address_range', models.TextField(blank=True, help_text='Allowed MS addresses', null=True)),
                ('validity_period', models.IntegerField(blank=True, help_text='Default validity period for SMS-MT (seconds)', null=True)),
                ('priority_flag', models.IntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3')], default=0, help_text='SMS-MT default priority')),
                ('registered_delivery', models.IntegerField(choices=[(1, 'No SMSC Delivery Receipt Requested'), (2, 'SMSC Delivery Receipt Requested'), (3, 'SMSC Delivery Receipt Requested For Failure')], default=1, help_text='Request SMSC delivery receipt')),
                ('replace_if_present_flag', models.IntegerField(choices=[(0, 'Do not replace'), (1, 'Replace')], default=0, help_text='Replace if present flag')),
                ('data_coding', models.IntegerField(choices=[(0, 'SMSC Default'), (1, 'IA5 ASCII'), (2, 'OCTET Unspecified'), (3, 'Latin1'), (4, 'OCTET Unspecified Common'), (5, 'JIS'), (6, 'Cyrilic'), (7, 'ISO-8859-8'), (8, 'UCS2'), (9, 'Pictogram'), (10, 'ISO-2022-JP'), (13, 'Extended Kanji Jis'), (14, 'KS C 5601')], default=0, help_text='Default message encoding')),
                ('sm_default_msg_id', models.IntegerField(default=0, help_text='SMSC index of pre-defined message')),
                ('dlr_expiry', models.IntegerField(default=86400, help_text='How long to wait for receipts (seconds)')),
                ('requeue_delay', models.IntegerField(default=120, help_text='Delay before retrying rejected messages (seconds)')),
                ('submit_sm_throughput', models.IntegerField(default=1, help_text='Message throttling in MPS (0 for unlimited)')),
                ('dlr_msg_id_bases', models.IntegerField(choices=[(0, 'Same base'), (1, 'Hex to Decimal'), (2, 'Decimal to Hex')], default=0, help_text='How to handle message IDs in receipts')),
            ],
            options={
                'db_table': 'jasmin_smpp_connector',
            },
        ),
        migrations.CreateModel(
            name='JasminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is active, use this instead of deleting')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was originally created')),
                ('modified_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='When this item was last modified')),
                ('username', models.CharField(help_text='This matches the user username created in Jasmin', max_length=255, unique=True, verbose_name='Username')),
                ('password', models.CharField(help_text='We shall store this password in clear text here', max_length=255, verbose_name='Password')),
                ('enabled', models.BooleanField(default=True)),
                ('mt_credential', models.JSONField(blank=True, default=dict)),
                ('smpps_credential', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'db_table': 'jasmin_user',
            },
        ),
    ]
